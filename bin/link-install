#!/usr/bin/perl
use strict;
use warnings;

use Cwd ();
use Term::ANSIColor qw(colored);

my %opt = ('--debug' => 0, '--force' => 0, '--really' => 0);
$opt{$_}++ for @ARGV;

die "duplicating options is weird\n" if grep {; $_ > 1 } values %opt;

my $debug  = delete $opt{'--debug'};
my $force  = delete $opt{'--force'};
my $really = delete $opt{'--really'};

sub execute {
  my ($desc, @argv) = @_;

  warn colored(['ansi51'], 'EXEC: ')
     . ($really ? q{} : "(not really) ")
     . "@argv\n";

  if ($really) {
    system(@argv) && die "couldn't $desc\n";
  }
}

sub skip_file {
  my ($reason, $always_warn) = @_;

  if ($debug || $always_warn) {
    warn colored(['ansi38'], 'SKIP: ') . "$reason\n";
  }

  no warnings 'exiting';
  next FILE;
}

die "unknown options provided; only --really and --debug work\n" if keys %opt;

my $home = $ENV{HOME};
die "no \$HOME set, so... what?\n" unless $home;

my $cwd  = Cwd::cwd();

my @files = `find . -type f -not -path './.git/*'`;
die "couldn't `find` files for some reason: $!\n" if $?;

s{^\./}{} for @files;
chomp @files;

my %made;

FILE: for my $file (@files) {
  # Never makes sense to copy this.
  next if $file eq '.gitignore';
  next if $file eq '.gitmodules';
  next if $file eq 'README.md';

  my @parts  = split m{/}, $file;
  my $target = $home;

  if (@parts > 1) {
    my $path = join q{/}, splice @parts, 0, @parts-1;
    $target = "$home/$path";

    unless ($made{$path}++ || -d $target) {
      execute("make $target", ('mkdir', '-p', $target));
    }
  }

  if (-e "$home/$file" || -l "$home/$file") {
    if (-l "$home/$file" && readlink("$home/$file") eq "$cwd/$file") {
      skip_file("~/$file already links to $cwd/$file");
    }

    unless ($force) {
      skip_file("~/$file which exists but isn't a link to $cwd/$file", 1);
    }

    execute("remove ~/$file", ('rm', "$home/$file"));
  }

  execute(
    "make a symlink to $cwd/$file in $target",
    ('ln', '-s', "$cwd/$file", $target),
  );
}
