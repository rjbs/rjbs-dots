#!/usr/bin/env perl
use v5.36.0;

system(qw( git branch -m main ));
warn "Couldn't move branch to be main\n" if $?;

system(qw( git remote rm origin ));
warn "Couldn't remove origin\n" if $?;

use IO::Async::Loop;
use Net::Async::HTTP;
use Path::Tiny;
use Process::Status;

my $http = Net::Async::HTTP->new;
IO::Async::Loop->new->add($http);

my $dir = path('.')->absolute->basename;

die "Can't compute repo name; what?!\n" unless $dir; #?!

my $res = $http->do_request(
  method => 'POST',
  uri    => "https://api.github.com/repos/rjbs/$dir/branches/master/rename",
  headers   => [
    Authorization   => "token $ENV{GITHUB_OAUTH_TOKEN}",
  ],
  content_type  => 'application/json',
  content       => '{"new_name":"main"}',
)->get;

unless ($res->is_success) {
  die "can't rename master to main on github: " . $res->as_string;
}

{
  my $file = path('dist.ini');
  die "no dist.ini" unless -e $file;
  my @lines = $file->lines;

  for (@lines) {
    s/rjbs\@cpan.org/cpan\@semiotic.systems/g;
    s/rjbs\@semiotic.systems/cpan\@semiotic.systems/g;
  }

  unless (grep { /perl-window/ } @lines) {
    my ($i) = grep {; $lines[$_] eq "[\@RJBS]\n" } keys @lines;
    splice @lines, $i+1, 0, "perl-window = long-term\n";
  }

  $file->spew(join q{}, @lines);
}

{
  my $file = path('.gitignore');
  die "no .gitignore" unless -e $file;
  my @lines = $file->lines;

  unless (grep { $_ eq ".gitnxtver_cache\n" } @lines) {
    push @lines, ".gitnxtver_cache\n";
  }

  $file->spew(join q{}, sort @lines);
}

MAILMAP: {
  my $file = path('.mailmap');
  last MAILMAP if -e $file;

  $file->spew("Ricardo Signes <rjbs\@semiotic.systems> <rjbs\@cpan.org>\n");
}

{
  my $file = path('Changes');
  die "no Changes" unless -e $file;

  my @lines = $file->lines;

  my ($i) = grep {; $lines[$_] eq "{{\$NEXT}}\n" } keys @lines;
  splice @lines, $i+1, 0, <<~'END';
          - update packaging and metadata
          - minimum required Perl is now v5.12
  END

  $file->spew(join q{}, @lines);
}

# kind of iffy; but I never have local hooks, right?
system(qw( rm -rf .git/hooks ));
Process::Status->assert_ok("removing git hooks");

system(qw( git add Changes .mailmap .gitignore dist.ini ));
Process::Status->assert_ok("staging files");
system(qw( git commit -m ), 'auto-preparation of updated release of ancient code');
